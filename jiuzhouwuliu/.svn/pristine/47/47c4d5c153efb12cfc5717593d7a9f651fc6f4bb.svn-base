package com.thinkgem.jeesite.modules.driver.web;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.thinkgem.jeesite.common.entity.DriveFleet;
import com.thinkgem.jeesite.common.entity.DriveOrder;
import com.thinkgem.jeesite.common.entity.Drivers;
import com.thinkgem.jeesite.common.entity.Users;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.utils.AjaxBeanUtil;
import com.thinkgem.jeesite.common.utils.CacheUtils;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.modules.driver.service.DriversServce;
import com.thinkgem.jeesite.modules.sys.entity.Dict;
import com.thinkgem.jeesite.modules.sys.utils.DictUtils;
/**
 * 
 * @author 王涛
 */
@Controller
@RequestMapping(value = "${adminPath}/driver/driverList")
public class DriverController extends BaseController {
	@Autowired
	private DriversServce driversServce;
	@RequestMapping(value ="list")
	public String list(Drivers drivers, HttpServletRequest request, HttpServletResponse response, Model model) {
		//从缓存里取字典列表   搜索内容
		Map<String, List<Dict>> dictMap = (Map<String, List<Dict>>)CacheUtils.get("dictMap");
			if (dictMap!=null){
				//审核状态
				model.addAttribute("driverStatus", dictMap.get("driver_master_change_auditing_status"));
				//等级
				model.addAttribute("carLevel", dictMap.get("car_level"));
		}
		Page<Drivers> page = driversServce.findPage(new Page<Drivers>(request, response), drivers); 
		//页面显示数据 非数据库字段字符串
		for(Drivers d:page.getList()){
			//用户状态 0正常 1锁定 
			d.setUsersStatus(DictUtils.getDictLabel(d.getUsersStatus(),"users_status",d.getUsersStatus()));
			//审核状态 0未审核 1已审核 2审核未通过
			d.setDriverMasterChangeAuditingStatus(DictUtils.getDictLabel(d.getDriverMasterChangeAuditingStatus(),"driver_master_change_auditing_status",d.getDriverMasterChangeAuditingStatus()));
	        d.setLevel(DictUtils.getDictValue(d.getLevel(), "car_level",d.getLevel()));
		}
		model.addAttribute("page", page);
		return "modules/driver/driverList";
	}
/**
 * 王涛
 * 添加车主连接
 */
	@RequestMapping(value = "add")
	public String add(Drivers drivers,HttpServletRequest request, HttpServletResponse response, Model model) {
		Map<String, List<Dict>> dictMap = (Map<String, List<Dict>>)CacheUtils.get("dictMap");
		if(dictMap!=null){
			//等级
			model.addAttribute("carLevel", dictMap.get("car_level"));
			model.addAttribute("status", dictMap.get("users_status"));
			model.addAttribute("truckType", dictMap.get("truck_type"));
			model.addAttribute("truckLength", dictMap.get("truck_length"));
			model.addAttribute("truckWidth", dictMap.get("truck_width"));
			//model.addAttribute("truckMaxwight", dictMap.get("truck_maxwight"));
			
		}
		DriveFleet driveFleet=new DriveFleet();
		//获得车队实体
		List<DriveFleet> DriveFleetList=driversServce.findDriveFleetList(driveFleet);
		model.addAttribute("DriveFleetList", DriveFleetList);
		return "modules/driver/infoDriver";
	}
	@RequestMapping(value = "saveDriver")
    @ResponseBody
    public AjaxBeanUtil  saveDriver(Users users, HttpServletRequest request, Model model, RedirectAttributes redirectAttributes) {
    	return driversServce.saveDrivers(users, request);
    }
	/**
	 * 根据Id查询车主详情
	 * 王涛
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "info")
	public String info( Drivers driver,HttpServletRequest request, HttpServletResponse response, Model model) {
		Drivers drivers=driversServce.findDriveId(driver.getId());
		Users  users=driversServce.findUserByUserId(drivers.getUserid());
		DictUtils.getDictLabel(users.getUsersStatus(),"users_status",users.getUsersStatus());
	    DictUtils.getDictValue(users.getLevel(), "car_level",users.getLevel());
		DriveFleet driveFleet=driversServce.findDriveFleetId(drivers.getDriveFleetId());
		//获得车队实体
		List<DriveFleet> DriveFleetList=driversServce.findDriveFleetList(driveFleet);
		List<Dict> usersStatus=DictUtils.getDictList("users_status");
		List<Dict>carLevel=DictUtils.getDictList("car_level");
		List<Dict>truckType=DictUtils.getDictList("truck_type");
		List<Dict>truckLength=DictUtils.getDictList("truck_length");
		List<Dict>truckWidth=DictUtils.getDictList("truck_width");
		List<Dict>truckMaxwight=DictUtils.getDictList("truck_maxwight");
		model.addAttribute("carLevel", carLevel);
		model.addAttribute("usersStatus", usersStatus);
		model.addAttribute("users", users);
		model.addAttribute("truckType", truckType);
		model.addAttribute("drivers", drivers);
		model.addAttribute("truckLength",truckLength );
		model.addAttribute("truckWidth", truckWidth);
		model.addAttribute("truckMaxwight",truckMaxwight);
		model.addAttribute("DriveFleetList", DriveFleetList);
		return "modules/driver/driverDetail";
	}
	/**
	 * 订单明细
	 */
	@RequestMapping(value = "order")
	public String order(DriveOrder driveOrder,HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<DriveOrder> page = driversServce.findOrderList(new Page<DriveOrder>(request, response), driveOrder); 
		for(DriveOrder d:page.getList()){
				d.setGoodsType(DictUtils.getDictLabel(d.getGoodsType(),"goods_type",d.getGoodsType()));
		}
		model.addAttribute("page", page);	
		return "modules/driver/orderDetail";	
	}
	/**
	 * 根据Id查询订单详情
	 * 王涛
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	/*@RequestMapping(value = "detailOrder")
	public String detailOrder( Drivers driver,HttpServletRequest request, HttpServletResponse response, Model model) {
		Drivers drivers=driversServce.findByOrderId(driver.getId());
		drivers.setGoodsType(DictUtils.getDictLabel(drivers.getGoodsType(),"goods_type",drivers.getGoodsType()));
		model.addAttribute("drivers", drivers);
		return "modules/driver/detailOrderList";
	}*/
	@RequestMapping(value="/uploadImage",method=RequestMethod.POST)  
    public void uploadImgApp(Users  users ,@RequestParam(value="file",required=false) MultipartFile file,
    		@RequestParam(value="file1",required=false) MultipartFile file1,
    		@RequestParam(value="file2",required=false) MultipartFile file2,
    		@RequestParam(value="file3",required=false) MultipartFile file3,
    		@RequestParam(value="file4",required=false) MultipartFile file4,
    		@RequestParam(value="file5",required=false) MultipartFile file5,
    		@RequestParam(value="file6",required=false) MultipartFile file6,
    		HttpServletRequest request){
		Drivers drivers=driversServce.findByUserId(users.getId());
		try {
			//头像
			if(file!=null && StringUtils.isNotEmpty(file.getOriginalFilename())){
				String path=driversServce.fildUpload(file, request);
				users.setHeadImg(path);
			}
			//身份证正面
			if(file1!=null && StringUtils.isNotEmpty(file1.getOriginalFilename())){
				String path1=driversServce.fildUpload(file1, request);
				users.setCardFaceImg(path1);
			}
			//身份证反面
			if(file2!=null && StringUtils.isNotEmpty(file2.getOriginalFilename())){
				String path2=driversServce.fildUpload(file2, request);
				users.setCardOtherImg(path2);
			}
			driversServce.updateInfo(users);
			//驾驶证正面
			if(file3!=null && StringUtils.isNotEmpty(file3.getOriginalFilename())){
				String path3=driversServce.fildUpload(file3, request);
				drivers.setDriveLicenceImg1(path3);
			}
			//驾驶证反面
			if(file4!=null && StringUtils.isNotEmpty(file4.getOriginalFilename())){
				String path4=driversServce.fildUpload(file4, request);
				drivers.setDriveLicenceImg2(path4);
			}
			//行驶证正面
			if(file5!=null && StringUtils.isNotEmpty(file5.getOriginalFilename())){
				String path5=driversServce.fildUpload(file5, request);
				drivers.setMoveLicenceImg1(path5);
			}
			//行驶证反面
			if(file6!=null && StringUtils.isNotEmpty(file6.getOriginalFilename())){
				String path6=driversServce.fildUpload(file6, request);
				drivers.setMoveLicenceImg2(path6);
			}
			driversServce.updateInfo1(drivers);
		} catch (Exception e) {
			e.printStackTrace();
		}
    }
	/**
	 * 锁定
	 */
	@RequestMapping(value="lock",method=RequestMethod.POST)
	@ResponseBody
	public AjaxBeanUtil lock(String id){
		return driversServce.lock(id);
	}
	/**
	 * 	解锁
	 * 
	 */
	@RequestMapping(value="clear",method=RequestMethod.POST)
	@ResponseBody
	public AjaxBeanUtil clear(String id){
		return driversServce.clear(id);
	}
	 
	/**
	 * 王涛
	 * 编辑车主链接
	 */
	@RequestMapping(value = "edit")
	public String edit(Drivers driver,HttpServletRequest request, HttpServletResponse response, Model model) {
		Drivers drivers=driversServce.findDriveId(driver.getId());
		Users  users=driversServce.findUserByUserId(drivers.getUserid());
		DictUtils.getDictLabel(users.getUsersStatus(),"users_status",users.getUsersStatus());
	    DictUtils.getDictValue(users.getLevel(), "car_level",users.getLevel());
		DriveFleet driveFleet=driversServce.findDriveFleetId(drivers.getDriveFleetId());
		//获得车队实体
		List<DriveFleet> DriveFleetList=driversServce.findDriveFleetList(driveFleet);
		List<Dict> usersStatus=DictUtils.getDictList("users_status");
		List<Dict>carLevel=DictUtils.getDictList("car_level");
		List<Dict>truckType=DictUtils.getDictList("truck_type");
		List<Dict>truckLength=DictUtils.getDictList("truck_length");
		List<Dict>truckWidth=DictUtils.getDictList("truck_width");
		List<Dict>truckMaxwight=DictUtils.getDictList("truck_maxwight");
		model.addAttribute("carLevel", carLevel);
		model.addAttribute("usersStatus", usersStatus);
		model.addAttribute("users", users);
		model.addAttribute("truckType", truckType);
		model.addAttribute("drivers", drivers);
		model.addAttribute("truckLength",truckLength );
		model.addAttribute("truckWidth", truckWidth);
		model.addAttribute("truckMaxwight",truckMaxwight);
		model.addAttribute("DriveFleetList", DriveFleetList);
		return "modules/driver/editDriver";
	}
	@RequestMapping(value = "update")
    @ResponseBody
    public AjaxBeanUtil  update(Users us,HttpServletRequest request, Model model, RedirectAttributes redirectAttributes) {
    	return driversServce.update(us, request);
    }
}
