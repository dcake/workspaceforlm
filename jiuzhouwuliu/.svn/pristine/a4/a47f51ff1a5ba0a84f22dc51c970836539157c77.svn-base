package com.thinkgem.jeesite.mobile.shipper.service;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;

import com.thinkgem.jeesite.common.dao.AgentOrderMapper;
import com.thinkgem.jeesite.common.dao.AgentsMapper;
import com.thinkgem.jeesite.common.dao.DriveOrderMapper;
import com.thinkgem.jeesite.common.dao.DriversMapper;
import com.thinkgem.jeesite.common.dao.GoodsMapper;
import com.thinkgem.jeesite.common.dao.GoodsownerOrderMapper;
import com.thinkgem.jeesite.common.dao.GoodsownersMapper;
import com.thinkgem.jeesite.common.dao.InseranceCompanyMapper;
import com.thinkgem.jeesite.common.dao.OrderRemarkMapper;
import com.thinkgem.jeesite.common.dao.UsersCollectMapper;
import com.thinkgem.jeesite.common.dao.UsersMapper;
import com.thinkgem.jeesite.common.entity.AgentOrder;
import com.thinkgem.jeesite.common.entity.Agents;
import com.thinkgem.jeesite.common.entity.Drivers;
import com.thinkgem.jeesite.common.entity.Goods;
import com.thinkgem.jeesite.common.entity.GoodsownerOrder;
import com.thinkgem.jeesite.common.entity.Goodsowners;
import com.thinkgem.jeesite.common.entity.InseranceCompany;
import com.thinkgem.jeesite.common.entity.OrderRemark;
import com.thinkgem.jeesite.common.entity.Users;
import com.thinkgem.jeesite.common.entity.UsersCollect;
import com.thinkgem.jeesite.common.utils.AjaxBeanUtil;
import com.thinkgem.jeesite.common.utils.IdGen;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.mobile.utils.PageParam;
import com.thinkgem.jeesite.mobile.utils.UtilDate;
import com.thinkgem.jeesite.modules.sys.dao.AreaDao;
import com.thinkgem.jeesite.modules.sys.entity.Area;
import com.thinkgem.jeesite.modules.sys.entity.Dict;
import com.thinkgem.jeesite.modules.sys.utils.DictUtils;
/**
 * @description	货主端发货
 * @author 文帅
 * @date 2017年8月21日 下午3:45:32
 */
@Service
@Transactional
public class MobileShipService {
	@Autowired
	private GoodsMapper goodsMapper;
	@Autowired
	private GoodsownersMapper goodsownersMapper;
	@Autowired
	private AreaDao areaDao;
	@Autowired
	private InseranceCompanyMapper inseranceCompanyMapper;
	@Autowired
	private GoodsownerOrderMapper goodsownerOrderMapper;
	@Autowired
	private UsersMapper usersMapper;
	@Autowired
	private AgentOrderMapper agentOrderMapper;
	@Autowired
	private UsersCollectMapper usersCollectMapper;
	@Autowired
	private OrderRemarkMapper orderRemarkMapper;
	@Autowired
	private AgentsMapper agentsMapper;
	@Autowired
	private DriversMapper driversMapper;
	@Autowired
	private DriveOrderMapper driveOrderMapper;
	/**
	 * @description	添加或修改保存货物
	 * @author 文帅
	 * @date 2017年8月21日 下午3:59:47
	 * @param goods
	 * @return
	 * @throws IOException 
	 * @throws  
	 */
	public AjaxBeanUtil addGoods(Goods goods,HttpServletRequest request) throws IOException{
		//判断发货人信息
		if(StringUtils.isEmpty(goods.getShipperName())){
			return new AjaxBeanUtil("请输入发货人姓名",false);
		}
		if(goods.getShipperName().length()>10){
			return new AjaxBeanUtil("发货人名字字数过长，10个字符以内",false);
		}
		if(StringUtils.isEmpty(goods.getShipperTel())){
			return new AjaxBeanUtil("请输入发货人联系方式",false);
		}
		if(!checkCellphone(goods.getShipperTel().trim())&&!checkTelephone(goods.getShipperTel().trim())){
			return new AjaxBeanUtil("请输入正确的发货人联系方式",false);
		}
		if(StringUtils.isEmpty(goods.getShipperArea())){
			return new AjaxBeanUtil("请输入发货地址", false);
		}
		if(StringUtils.isEmpty(goods.getShipperAreaDetail())){
			return new AjaxBeanUtil("请输入发货详细地址", false);
		}
		if(goods.getShipperAreaDetail().length()>100){
			return new AjaxBeanUtil("发货详细地址字数过长，100个字符以内", false);
		}
		
		//判断收货人信息
		if(StringUtils.isEmpty(goods.getReciverName())){
			return new AjaxBeanUtil("请输入收货人姓名",false);
		}
		if(goods.getReciverName().length()>10){
			return new AjaxBeanUtil("收货人名字字数过长，10个字符以内",false);
		}
		if(StringUtils.isEmpty(goods.getReciverTel())){
			return new AjaxBeanUtil("请输入收货人联系方式",false);
		}
		if(!checkCellphone(goods.getReciverTel().trim())&&!checkTelephone(goods.getReciverTel().trim())){
			return new AjaxBeanUtil("请输入正确收货人联系方式",false);
		}
		if(StringUtils.isEmpty(goods.getReciverArea())){
			return new AjaxBeanUtil("请输入收货地址", false);
		}
		if(StringUtils.isEmpty(goods.getReciverAreaDetail())){
			return new AjaxBeanUtil("请输入收货详细地址", false);
		}
		if(goods.getReciverAreaDetail().length()>100){
			return new AjaxBeanUtil("收货详细地址字数过长，100个字符以内", false);
		}
		//创建一个通用的多部分解析器  
        CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(request.getSession().getServletContext());  
        //判断 request 是否有文件上传,即多部分请求  
        if(multipartResolver.isMultipart(request)){  
            //转换成多部分request    
            MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest)request;  
            //取得request中的所有文件名  
            Iterator<String> iter = multiRequest.getFileNames();
            //图片存放路径
            String tempURL = "/upload/APPGoodsImg/";
        	//获取在Web服务器上的 绝对路径  
 	        String path =request.getSession().getServletContext().getRealPath("/")+tempURL;
 	        //创建文件夹
 	  		File folders=new File(path);
 	  	    if(!folders.exists() && !folders.isDirectory()){
 	  	    	folders.mkdirs();
 	  	    }
            int i = 1;
            while(iter.hasNext()){
                //取得上传文件  
                MultipartFile file = multiRequest.getFile(iter.next());  
                if(file != null){  
                    //取得当前上传文件的文件名称  
                    String myFileName = file.getOriginalFilename();  
                    //如果名称不为“”,说明该文件存在，否则说明该文件不存在  
                    if(myFileName.trim() !=""){
             	  	    //获取文件扩展名
              	  	    String tail="";
              			String[] tmps=file.getOriginalFilename().split("\\.");
              			if(tmps.length>1){
              				tail="."+tmps[tmps.length-1];
              			}
              	  	    //生成随机文件名
              	        SimpleDateFormat df = new SimpleDateFormat("yyMMddHHmmss");
              			String fileName = df.format(new Date()) + "_" + new Random().nextInt(1000);
              			//合并文件名和扩展名
              			fileName=fileName+tail;
                        //定义上传路径  
                        String imgPath = path+fileName;  
                        System.out.println("11111=="+imgPath);
                        File localFile = new File(imgPath);  
                        file.transferTo(localFile);  
                        if(i == 1){
                        	goods.setGoodsImg1(tempURL + fileName);
            	        }
            	        if(i == 2){
            	        	goods.setGoodsImg2(tempURL + fileName);
            	        }
            	        if(i == 3){
            	        	goods.setGoodsImg3(tempURL + fileName);
            	        }
            	        if(i == 4){
            	        	goods.setGoodsImg4(tempURL + fileName);
            	        }
            	        if(i == 5){
            	        	goods.setGoodsImg5(tempURL + fileName);
            	        }
            	        if(i == 6){
            	        	goods.setGoodsImg6(tempURL + fileName);
            	        }
            	        if(i == 7){
            	        	goods.setGoodsImg7(tempURL + fileName);
            	        }
            	        if(i == 8){
            	        	goods.setGoodsImg8(tempURL + fileName);
            	        }
            	        i++;
                    }  
                }  
            }  
        }
		if(StringUtils.isEmpty(goods.getId())){//添加货物
			//保存货物
			goods.setId(IdGen.uuid());
			String orderNo = UtilDate.getOrderNum();	//订单号暂用时间戳
			goods.setOrderNo(orderNo);
	        goods.setIsExamPass("0");
	        goods.setIsCheckPass("0");
	        goods.setIsHasBill("0");
	        goods.setGoodsBelongto("0");
	        goods.setCreateBy("1");
	        goods.setCreateDate(new Date());
	        goods.setUpdateBy("1");
	        goods.setUpdateDate(new Date());
			goodsMapper.insertSelective(goods);
			Goodsowners goodsowners=goodsownersMapper.findByUserId(goods.getUserId());
			//添加到货主订单
			GoodsownerOrder goodsownerOrder=new GoodsownerOrder();
			goodsownerOrder.setId(IdGen.uuid());
			goodsownerOrder.setGoodsId(goods.getId());
			goodsownerOrder.setGoodsownersId(goodsowners.getId());
			goodsownerOrder.setGoodCurrStatus("0");
			goodsownerOrder.setCompetePriceViewCount(0);
			goodsownerOrder.setJingjiaOrWeituo("0");
			goodsownerOrder.setCreateBy("1");
			goodsownerOrder.setCreateDate(new Date());
			goodsownerOrder.setUpdateBy("1");
			goodsownerOrder.setUpdateDate(new Date());
			goodsownerOrderMapper.insertSelective(goodsownerOrder);
			goods.setGoodsownerOrderId(goodsownerOrder.getId());
			return new AjaxBeanUtil("添加成功！",true,goods);
		}else{//修改货物
			goodsMapper.updateByPrimaryKeySelective(goods);
			return new AjaxBeanUtil("修改成功！",true,goods);
		}
	}
	
	/**
	 * @description	校验手机号是否正确
	 * @author 文帅
	 * @date 2017年8月23日 上午11:06:50
	 * @param cellphone
	 * @return
	 */
	public static boolean checkCellphone(String cellphone) {
        String regex = "^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,1,2,5-9])|(177))\\d{8}$";
        Pattern pattern=Pattern.compile(regex);
        Matcher matcher=pattern.matcher(cellphone);
        return matcher.matches();
    }
	
	/**
     * 验证固话号码
     * @author 文帅
     * @param telephone
     * @return
     */
   public static boolean checkTelephone(String telephone) {
       String regex = "^(0\\d{2}-\\d{8}(-\\d{1,4})?)|(0\\d{3}-\\d{7,8}(-\\d{1,4})?)$";
       Pattern pattern=Pattern.compile(regex);
       Matcher matcher=pattern.matcher(telephone);
       return matcher.matches();
   }
	
	/**
	 * @description	根据用户ID查询收货人和发货人列表
	 * @author 文帅
	 * @date 2017年8月21日 下午5:42:56
	 * @param userId
	 * @return
	 */
	public AjaxBeanUtil findShipperList(String userId,String shipperName,String reciverName){
		try {
			Map<String, Object> paramMap=new HashMap<String, Object>();
			if(StringUtils.isNotEmpty(shipperName)){
				paramMap.put("shipperName", shipperName);
			}
			if(StringUtils.isNotEmpty(reciverName)){
				paramMap.put("reciverName", reciverName);
			}
			paramMap.put("userId", userId);
			List<Goods> list=goodsMapper.findGoodsList(paramMap);
			if(list.size()==0){
				return new AjaxBeanUtil("暂无数据", false);
			}else{
				for(Goods g:list){
					g.setGoodsType(DictUtils.getDictLabel(g.getGoodsType(), "goods_type", g.getGoodsType()));
				}
			}
			return new AjaxBeanUtil("查询成功",true,list);
		} catch (Exception e) {
			e.printStackTrace();
			return new AjaxBeanUtil("系统异常", false);
		}
	}
	
	/**
	 * @description	根据字典类型查询需求车型，货物类型，货物单位
	 * @author 文帅
	 * @date 2017年8月22日 上午9:31:35
	 * @return
	 */
	public AjaxBeanUtil findDictList(String type){
		try {
			List<Dict> dictList=DictUtils.getDictList(type);
			return new AjaxBeanUtil("查询成功", true, dictList);
		} catch (Exception e) {
			e.printStackTrace();
			return new AjaxBeanUtil("系统异常", false);
		}
	}
	/**
	 * @description	获取所有省份
	 * @author 文帅
	 * @date 2017年8月22日 上午9:55:49
	 * @param tyep 城市类型(省-2，市-3，区-4)
	 * @param id 城市ID
	 * @return
	 */
	public AjaxBeanUtil findGeoInfoList(HttpServletRequest request,String type){
		try {
			Map<String, Object> paramMap=new HashMap<String, Object>();
			if(StringUtils.isNotEmpty(type)){
				paramMap.put("type", type);
			}
			if("4".equals(type)){
				List<Area> areaList=areaDao.findGeoInfo(paramMap);
				if(areaList.size()==0){
					return new AjaxBeanUtil("暂无数据", false);
				}
				return new AjaxBeanUtil("查询区县成功", true, areaList);
			}
			List<Area> provinceList=areaDao.findGeoInfo(paramMap);
			Map<String, Object> jsonMap=new HashMap<String, Object>();
			List<Object>  list= new ArrayList<Object>();
			if(provinceList.size()==0){
				return new AjaxBeanUtil("暂无数据", false);
			}else{
				for(Area a:provinceList){
					jsonMap.put("name", a.getName());
					jsonMap.put("id", a.getId());
					if(StringUtils.isNotEmpty(type)){
						paramMap.put("type", "3");
					}
					if(StringUtils.isNotEmpty(a.getId())){
						paramMap.put("id", a.getId());
					}
					List<Area> cityList=areaDao.findGeoInfo(paramMap);
					jsonMap.put("city", cityList);
					list.add(jsonMap);
				}
				return new AjaxBeanUtil("查询成功",true,list);
			}
		} catch (Exception e) {
			e.printStackTrace();
			return new AjaxBeanUtil("系统异常", false);
		}
	}
	
	/**
	 * @description	查询保险公司列表
	 * @author 文帅
	 * @date 2017年8月22日 上午10:55:57
	 * @return
	 */
	public AjaxBeanUtil findInsCompanyList(){
		try {
			List<InseranceCompany> list=inseranceCompanyMapper.findInsCompanyList();
			return new AjaxBeanUtil("查询成功", true, list);
		} catch (Exception e) {
			e.printStackTrace();
			return new AjaxBeanUtil("系统异常", false);
		}
	}
	/**
	 * @description 发布竞价	
	 * @author 文帅
	 * @date 2017年8月22日 上午11:48:53
	 * @return
	 */
	public AjaxBeanUtil publishBid(GoodsownerOrder goodsownerOrder){
		try {
			GoodsownerOrder goodsownerOrder1=goodsownerOrderMapper.selectByPrimaryKey(goodsownerOrder.getId());
			Users user=usersMapper.selectByPrimaryKey(goodsownerOrder.getUserId());
			String notCheckPoint=DictUtils.getDictList("not_check_point").get(0).getValue();//C类客户不需要审核的积分
			if(user.getCurrentPoint()>=Integer.parseInt(notCheckPoint)){
				goodsownerOrder.setGoodCurrStatus("1");
			}else{
				goodsownerOrder.setGoodCurrStatus("6");
			}
			if("0".equals(goodsownerOrder1.getGoodCurrStatus())||"2".equals(goodsownerOrder1.getGoodCurrStatus())){
				goodsownerOrder.setPublicCompetePriceTime(new Date());
				goodsownerOrder.preUpdate();
				goodsownerOrderMapper.updateByPrimaryKeySelective(goodsownerOrder);
				return new AjaxBeanUtil("发布竞价成功", true);
			}else{
				return new AjaxBeanUtil("该货物已成功发布竞价，不能重复发布", false);
			}
		} catch (Exception e) {
			e.printStackTrace();
			return new AjaxBeanUtil("系统异常", false);
		}
	}
	
	/**
	 * @description	查询经纪人列表
	 * @author 文帅
	 * @date 2017年8月22日 下午5:31:28
	 * @param pageNo
	 * @return
	 */
	public AjaxBeanUtil findAgentsList(String pageNo,String userId){
		try {
			int currentPage = Integer.parseInt(pageNo)*PageParam.DEFAULT_PAGESIZE;
			int pageSize = PageParam.DEFAULT_PAGESIZE;
			Map<String, Object> paramMap=new HashMap<String, Object>();
			paramMap.put("currentPage", currentPage);
			paramMap.put("pageSize", pageSize);
			List<Users> list=usersMapper.findAgentsList(paramMap);
			if(list.size()==0){
				return new AjaxBeanUtil("暂无更多数据", false);
			}else{
				for(Users u:list){
					//该经纪人总交易数量
					Integer dealTotalCount=agentOrderMapper.findDealTotalCountByAgentId(u.getAgentId(),"");
					u.setDealTotalCount(dealTotalCount);
					//该经纪人曾与当前用户交易的数量
					Integer dealCount=agentOrderMapper.findDealCountByAgentId(u.getAgentId(),userId);
					u.setDealCount(dealCount);
					UsersCollect usersCollect=usersCollectMapper.findCollect(u.getId(),userId);
					//判断该经纪人是否被当前用户收藏（0-否，1-是）
					if(usersCollect!=null){
						u.setIsCollect("1");
					}else{
						u.setIsCollect("0");
					}
				}
			}
			return new AjaxBeanUtil("查询成功", true,list);
		} catch (Exception e) {
			e.printStackTrace();
			return new AjaxBeanUtil("系统异常", false); 
		}
	}
	
	/**
	 * @description	根据经纪人ID查询经纪人详情
	 * @author 文帅
	 * @date 2017年8月23日 下午3:07:18
	 * @param agentId
	 * @return
	 */
	public AjaxBeanUtil lookAgentDetail(String agentId,String userId){
		try {
			Users agent=usersMapper.findAgentByAgentId(agentId);
			if(agent==null){
				return new AjaxBeanUtil("经纪人不存在", false);
			}
			Integer transportCount=agentOrderMapper.findDealTotalCountByAgentId(agentId,"1");//接受委托单的运输次数
			agent.setTransportCount(transportCount);
			Integer shipCount=agentOrderMapper.findDealTotalCountByAgentId(agentId,"0");//非委托单的运输次数
			agent.setShipCount(shipCount);
			UsersCollect usersCollect=usersCollectMapper.findCollect(agent.getId(),userId);
			//判断该经纪人是否被当前用户收藏（0-否，1-是）
			if(usersCollect!=null){
				agent.setIsCollect("1");
			}else{
				agent.setIsCollect("0");
			}
			return new AjaxBeanUtil("查询成功", true,agent);
		} catch (Exception e) {
			e.printStackTrace();
			return new AjaxBeanUtil("系统异常", false);
		}
	}
	
	/**
	 * @description	根据车主ID查询车主详情
	 * @author 文帅
	 * @date 2017年8月23日 下午3:07:18
	 * @param agentId
	 * @return
	 */
	public AjaxBeanUtil lookDriverDetail(String jingJiaRenId,String userId){
		try {
			Drivers drivers=driversMapper.findDriverByUserId(jingJiaRenId);
			Users user=usersMapper.selectByPrimaryKey(jingJiaRenId);
			if(drivers==null){
				return new AjaxBeanUtil("车主不存在", false);
			}
			drivers.setHeadImg(user.getHeadImg());
			drivers.setTruename(user.getTruename());
			drivers.setIsTrueName(user.getIsTruename());
			drivers.setPersonDescribe(user.getPersonDescribe());
			drivers.setPhoneno(user.getPhoneno());
			Integer transportCount=driveOrderMapper.findCountByDriverId(drivers.getId());//运输次数
			drivers.setTransportCount(transportCount);
			UsersCollect usersCollect=usersCollectMapper.findCollect(jingJiaRenId,userId);
			//判断该经纪人是否被当前用户收藏（0-否，1-是）
			if(usersCollect!=null){
				drivers.setIsCollect("1");
			}else{
				drivers.setIsCollect("0");
			}
			return new AjaxBeanUtil("查询成功", true,drivers);
		} catch (Exception e) {
			e.printStackTrace();
			return new AjaxBeanUtil("系统异常", false);
		}
	}
	
	
	/**
	 * @description	收藏和取消收藏
	 * @author 文帅
	 * @date 2017年8月23日 下午4:30:29
	 * @param userId
	 * @param agentId
	 * @param type用于判断是车主还是经纪人（1车主、2经纪人）
	 * @return
	 */
	public AjaxBeanUtil collectOrCancel(String userId,String jingJiaRenId,String type){
		try {
			UsersCollect usersCollect = null;
			UsersCollect usersCollect1=new UsersCollect();
			if("1".equals(type)){
				Drivers drivers=driversMapper.selectByPrimaryKey(jingJiaRenId);
				usersCollect=usersCollectMapper.findCollect(drivers.getUserid(),userId);
				usersCollect1.setCollectUserid(drivers.getUserid());
			}else if("2".equals(type)){
				Agents agents=agentsMapper.selectByPrimaryKey(jingJiaRenId);
				usersCollect=usersCollectMapper.findCollect(agents.getUserid(),userId);
				usersCollect1.setCollectUserid(agents.getUserid());
			}
			Users user=usersMapper.selectByPrimaryKey(userId);
			if(usersCollect==null){
				usersCollect1.setId(IdGen.uuid());
				usersCollect1.setUserid(userId);
				usersCollect1.setCreateBy(user.getTruename());
				usersCollect1.setUpdateBy(user.getTruename());
				usersCollect1.setCreateDate(new Date());
				usersCollect1.setUpdateDate(new Date());
				usersCollectMapper.insertSelective(usersCollect1);
				return new AjaxBeanUtil("收藏成功", true);
			}else{
				usersCollectMapper.deleteByPrimaryKey(usersCollect.getId());
				return new AjaxBeanUtil("取消收藏成功", true);
			}
		} catch (Exception e) {
			e.printStackTrace();
			return new AjaxBeanUtil("系统异常", false);
		}
	}
	
	/**
	 * @description	根据经纪人ID查询该经纪人评价
	 * @author 文帅
	 * @date 2017年8月23日 下午6:10:00
	 * @param currentPage
	 * @param agentId
	 * @return
	 */
	public AjaxBeanUtil findEvaluationList(String pageNo,String agentId){
		try {
			int currentPage = Integer.parseInt(pageNo)*PageParam.DEFAULT_PAGESIZE;
			int pageSize = PageParam.DEFAULT_PAGESIZE;
			Map<String, Object> paramMap=new HashMap<String, Object>();
			paramMap.put("agentId", agentId);
			Integer totalCount=orderRemarkMapper.findEvaluationCount(paramMap);//查询评价数量
			paramMap.put("currentPage", currentPage);
			paramMap.put("pageSize", pageSize);
			List<OrderRemark> list=orderRemarkMapper.findEvaluationList(paramMap);
			if(list.size()==0){
				return new AjaxBeanUtil("暂无数据", false);
			}
			Map<String, Object> jsonMap=new HashMap<String, Object>();
			jsonMap.put("totalCount", totalCount);
			jsonMap.put("list", list);
			return new AjaxBeanUtil("查询成功", true,jsonMap);
		} catch (Exception e) {
			e.printStackTrace();
			return new AjaxBeanUtil("系统异常", false);
		}
	}
	/**
	 * @description	确认委托
	 * @author 文帅
	 * @date 2017年8月24日 上午10:07:04
	 * @param agentId
	 * @return
	 */
	public AjaxBeanUtil confirmConsign(String agentId,String goodsId,String goodsownerOrderid,String userId){
		try {
			Users user=usersMapper.selectByPrimaryKey(userId);
			//添加经纪人订单
			AgentOrder agentOrder=new AgentOrder();
			agentOrder.setId(IdGen.uuid());
			agentOrder.setGoodsId(goodsId);
			agentOrder.setAgentsId(agentId);
			agentOrder.setGoodCurrStatus("8");//待确认状态
			agentOrder.setFabuOrZhiding("0");
			agentOrder.setCompetePriceViewCount(0);
			agentOrder.setGoodsownerOrderid(goodsownerOrderid);
			agentOrder.setCreateBy(user.getTruename());
			agentOrder.setCreateDate(new Date());
			agentOrder.setUpdateBy(user.getTruename());
			agentOrder.setUpdateDate(new Date());
			agentOrderMapper.insertSelective(agentOrder);
			//修改货主订单
			GoodsownerOrder goodsownerOrder=goodsownerOrderMapper.selectByPrimaryKey(goodsownerOrderid);
			goodsownerOrder.setJingjiaOrWeituo("1");
			goodsownerOrder.setGoodCurrStatus("8");//待确认状态
			goodsownerOrder.setUpdateBy(user.getTruename());
			goodsownerOrder.setUpdateDate(new Date());
			goodsownerOrderMapper.updateByPrimaryKeySelective(goodsownerOrder);
			return new AjaxBeanUtil("委托成功", true);
		} catch (Exception e) {
			e.printStackTrace();
			return new AjaxBeanUtil("系统异常", false);
		}
	}
	
	/**
	 * @description	发货列表
	 * @author 文帅
	 * @date 2017年9月5日 下午4:45:28
	 * @param currentPage
	 * @param userId
	 * @return
	 */
	public AjaxBeanUtil findShipList(String pageNo,String userId){
		try {
			int currentPage = Integer.parseInt(pageNo)*PageParam.DEFAULT_PAGESIZE;
			int pageSize = PageParam.DEFAULT_PAGESIZE;
			Map<String, Object> paramMap=new HashMap<String, Object>();
			paramMap.put("userId", userId);
			paramMap.put("currentPage", currentPage);
			paramMap.put("pageSize", pageSize);
			List<GoodsownerOrder> list=goodsownerOrderMapper.findShipList(paramMap);
			if(list.size()==0){
				return new AjaxBeanUtil("暂无更多数据", false);
			}else{
				for(GoodsownerOrder g:list){
					g.setGoodsType(DictUtils.getDictLabel(g.getGoodsType(), "goods_type", g.getGoodsType()));
				}
			}
			return new AjaxBeanUtil("查询成功", true, list);
		} catch (Exception e) {
			e.printStackTrace();
			return new AjaxBeanUtil("系统异常", false);
		}
	}
	/**
	 * @description	删除货主订单
	 * @author 文帅
	 * @date 2017年9月6日 下午3:02:24
	 * @param goodsownerOrderId
	 * @return
	 */
	public AjaxBeanUtil delGoodsownerOrder(String goodsownerOrderId){
		try {
			GoodsownerOrder goodsownerOrder=goodsownerOrderMapper.selectByPrimaryKey(goodsownerOrderId);
			goodsownerOrderMapper.deleteByPrimaryKey(goodsownerOrder.getId());
			goodsMapper.deleteByPrimaryKey(goodsownerOrder.getGoodsId());
			return new AjaxBeanUtil("删除成功", true);
		} catch (Exception e) {
			e.printStackTrace();
			return new AjaxBeanUtil("系统异常", false);
		}
	}
	
	/**
	 * @description	根据货物订单ID查询货物及订单详情
	 * @author 文帅
	 * @date 2017年9月6日 下午3:53:17
	 * @param goodsownerOrderId
	 * @return
	 */
	public AjaxBeanUtil findGoodsByOrderId(String goodsownerOrderId){
		try {
			GoodsownerOrder goodsownerOrder=goodsownerOrderMapper.selectByPrimaryKey(goodsownerOrderId);
			Goods goods=goodsMapper.selectByPrimaryKey(goodsownerOrder.getGoodsId());
			goods.setGoodCurrStatus(DictUtils.getDictLabel(goodsownerOrder.getGoodCurrStatus(), "order_status", goodsownerOrder.getGoodCurrStatus()));
			return new AjaxBeanUtil("查询成功", true,goods);
		} catch (Exception e) {
			e.printStackTrace();
			return new AjaxBeanUtil("系统异常", false);
		}
	}
}
