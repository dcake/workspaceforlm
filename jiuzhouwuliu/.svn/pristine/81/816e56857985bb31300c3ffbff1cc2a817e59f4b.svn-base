package com.thinkgem.jeesite.modules.goodsowner.service;
import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import net.sourceforge.pinyin4j.PinyinHelper;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.thinkgem.jeesite.common.dao.DriveFleetMapper;
import com.thinkgem.jeesite.common.dao.GoodsownerOrderMapper;
import com.thinkgem.jeesite.common.dao.GoodsownersMapper;
import com.thinkgem.jeesite.common.dao.UsersMapper;
import com.thinkgem.jeesite.common.entity.DriveFleet;
import com.thinkgem.jeesite.common.entity.Goodsowners;
import com.thinkgem.jeesite.common.entity.Users;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.utils.AjaxBeanUtil;
import com.thinkgem.jeesite.common.utils.IdGen;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.modules.sys.entity.User;
import com.thinkgem.jeesite.modules.sys.security.SystemAuthorizingRealm.Principal;
import com.thinkgem.jeesite.modules.sys.service.SystemService;
import com.thinkgem.jeesite.modules.sys.utils.UserUtils;
/**
 * 
 * 王涛
 *货主管理
 */
@Service("goodsownerService")
@Transactional
public class GoodsownerService {
	@Autowired
	private UsersMapper usersMapper;
	@Autowired
	private DriveFleetMapper driveFleetMapper;
	@Autowired
	private GoodsownersMapper goodsownersMapper;
	@Autowired
	private GoodsownerOrderMapper goodsownersOrderMapper;
	
	public Page<Goodsowners> findPage(Page<Goodsowners> page, Goodsowners goodsowners) {
		goodsowners.setPage(page);
		page.setList(goodsownersMapper.findList(goodsowners));
		return page;
	}
	/**
	 * @description	：查询货主订单
	 * @author pangchengxiang
	 * @date 2017年8月22日 上午9:41:17
	 * @return Page<Goodsowners>
	 */
	public Page<Goodsowners> findGoodsownerOrderList(Page<Goodsowners> page, Goodsowners goodsowners) {
		goodsowners.setPage(page);
		page.setList(goodsownersOrderMapper.findOrderList(goodsowners));
		return page;
	}
	
	public Goodsowners findById(String id){
		return goodsownersMapper.selectByPrimaryKeyId(id);
	}
	public Goodsowners findByOrderId(String id){
		return goodsownersMapper.findOrderListId(id);
	}
	  public List<DriveFleet>findDriveFleetList(DriveFleet driveFleet){
		  return driveFleetMapper.findDriveFleetList(driveFleet);
	  }
	  public DriveFleet getDriveFleet(DriveFleet driveFleet){
			return driveFleetMapper.selectByPrimaryKey(driveFleet.getId());
		}
	/**
	 * 王涛
	 * 保存
	 */
	public AjaxBeanUtil saveGoodsowners(Users u,HttpServletRequest request){
		if(StringUtils.isEmpty(u.getId())||"undefined".equals(u.getId())){
			User user = UserUtils.getUser();
			//保存用户信息
			u.setId(IdGen.uuid());
			u.setPassword(SystemService.entryptPassword(u.getPassword()));
			//u.setStatus("0");//0正常 1锁定
			u.setUserSort("0");//0货主 1车主 2经纪人
			u.setSpell(getPinYinHeadChar(u.getTruename()));//拼音简写
			u.setExamineStatus("0");//审核状态默认 0 已审核 1已审核 2审核未通过
			u.setUpdateDate(new Date());
			u.setUpdateBy(user.getName());
			u.setCreateDate(new Date());
			u.setCreateBy(user.getName());
			usersMapper.insertSelective(u);
			//保存货主信息
			String companyName=request.getParameter("companyName");
			String identityType=request.getParameter("identityType");
			Goodsowners goodsowners=new Goodsowners();
			goodsowners.setId(IdGen.uuid());
			goodsowners.setUserId( u.getId());
			goodsowners.setCompanyName(companyName);
			goodsowners.setIdentityType(identityType);//个人身份选择（0个人、1公司2企业',
			goodsowners.setDelFlag("0");
			goodsowners.setIsTruecommpany("1");//是否企业认证（0否 1是）
			goodsowners.setUpdateDate(new Date());
			goodsowners.setUpdateBy(user.getName());
			goodsowners.setCreateDate(new Date());
			goodsowners.setCreateBy(user.getName());
			goodsownersMapper.insertSelective(goodsowners);
			return new AjaxBeanUtil("保存成功", true,u);
			}
		return new AjaxBeanUtil("保存失败", false,u);
		}
	
	/**
	 * @desc 根据字符串获取首字母
	 * @author wangtao
	 * @return
	 */
	public String getPinYinHeadChar(String str) {
        String convert = "";
        for (int j = 0; j < str.length(); j++) {
            char word = str.charAt(j);
            String[] pinyinArray = PinyinHelper.toHanyuPinyinStringArray(word);
            if (pinyinArray != null) {
                convert += pinyinArray[0].charAt(0);
            } else {
                convert += word;
            }
        }
        return convert;
    }
	/**
	 * 上传图片
	 * 王涛
	 * @param file
	 * @param request
	 * @return
	 * @throws IllegalStateException
	 * @throws IOException
	 */
	public String fildUpload(MultipartFile file, HttpServletRequest request) throws IllegalStateException, IOException {
		  //获得物理路径webapp所在路径  
		    String pathRoot = request.getSession().getServletContext().getRealPath("");  
		    String path="";  
		    if(!file.isEmpty()){  
	        //生成uuid作为文件名称  
	        String uuid = UUID.randomUUID().toString().replaceAll("-","");  
	        //获得文件类型（可以判断如果不是图片，禁止上传）  
	        String contentType=file.getContentType();  
	        //获得文件后缀名称  
	        String imageName=contentType.substring(contentType.indexOf("/")+1);  
	        path="/static/images/"+uuid+"."+imageName;  
	        file.transferTo(new File(pathRoot+path));
	    }
	    return path;
	}
	public void updateInfo(Users users){
		if(users!=null){
		usersMapper.updateByPrimaryKeySelective(users);
		}
	}
	public void updateInfo1(Goodsowners goodsowners){
		if(goodsowners!=null){
			goodsownersMapper.updateByPrimaryKeySelective(goodsowners);
		}
	}

	public Goodsowners findByUserId(String userId){
		return goodsownersMapper.findByUserId(userId);
	}
	/**锁定
	 * 
	 * @return
	 */
	public AjaxBeanUtil lock(String id){
		Principal principal = UserUtils.getPrincipal();
		Users u =usersMapper.selectByPrimaryKey(id);
		try {
			if( u!=null){
				u.setStatus("1");//1锁定 0正常
				u.setUpdateDate(new Date());
				u.setUpdateBy(principal.getName());
				usersMapper.updateByPrimaryKeySelective(u);
				return new AjaxBeanUtil("锁定成功", true);
			}
			return new AjaxBeanUtil("锁定失败", true);
		} catch (Exception e) {
			e.printStackTrace();
			return new AjaxBeanUtil("系统异常", false);
		}
	}
	/**
	 * 解锁
	 */
	public AjaxBeanUtil clear(String id){
		Principal principal = UserUtils.getPrincipal();
		Users u =usersMapper.selectByPrimaryKey(id);
		try {
			if( u!=null){
				u.setStatus("0");//1锁定 0正常
				u.setUpdateDate(new Date());
				u.setUpdateBy(principal.getName());
				usersMapper.updateByPrimaryKeySelective(u);
				return new AjaxBeanUtil("解锁成功", true);
			}
			return new AjaxBeanUtil("解锁失败", true);
		} catch (Exception e) {
			e.printStackTrace();
			return new AjaxBeanUtil("系统异常", false);
		}
	}
	
	
	public Users findByUsersId(String userId){
		return usersMapper.selectByPrimaryKey(userId);
	}
	public Goodsowners findGoodsownersId(String id){
		return goodsownersMapper.selectByPrimaryKey(id);
	}
	public  Goodsowners findGoodsownersByUserId(String userId){
		return goodsownersMapper.findGoodsownersByUserId(userId);
		}
	
	/**
	 * 王涛
	 * 编辑
	 */
	public AjaxBeanUtil update(Users us,HttpServletRequest request){
		try {
			User user = UserUtils.getUser();
			String companyName=request.getParameter("companyName");
			String identityType=request.getParameter("identityType");
			//修改车主信息
			Goodsowners goodsowners=goodsownersMapper.findGoodsownersByUserId(us.getId());
			goodsowners.setCompanyName(companyName);
			goodsowners.setIdentityType(identityType);
			goodsowners.setDelFlag("0");
			goodsowners.setIsTruecommpany("1");//是否企业认证（0否 1是）
			goodsowners.setUpdateDate(new Date());
			goodsowners.setUpdateBy(user.getName());
			goodsowners.setCreateDate(new Date());
			goodsowners.setCreateBy(user.getName());
			goodsownersMapper.updateByPrimaryKeySelective(goodsowners);
			//修改用户信息
			if (StringUtils.isNotBlank(us.getPassword())) {
				us.setPassword(SystemService.entryptPassword(us.getPassword()));
			}
			usersMapper.updateByPrimaryKeySelective(us);
			return new AjaxBeanUtil("修改成功", true);
		} catch (Exception e) {
			e.printStackTrace();
			return new AjaxBeanUtil("系统异常", false);
		}
	}
	/**通过用户ID查询用户实体
	 * @param userId
	 * @return
	 */
	public Users findUserByUserId(String userId){
		return usersMapper.selectByPrimaryKey(userId);
	}
}

